#![cfg(test)]

use anyhow::Result;
use integration_utils::integration_contract::IntegrationContract;
use near_sdk::json_types::U64;
use sweat_model::SweatApiIntegration;

use crate::prepare::{prepare_contract, IntegrationContext};

const EPS: f64 = 0.00001;

#[tokio::test]
async fn test_formula() -> Result<()> {
    let mut context = prepare_contract().await?;

    let manager = context.manager().await?;

    let steps = context.ft_contract().get_steps_since_tge().await?;

    assert_eq!(0, steps.0);

    let steps_to_convert = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000];
    let steps_from_tge = [
        1,
        10,
        100,
        1000,
        10000,
        100000,
        1000000,
        10000000,
        100000000,
        1000000000,
        10000000000,
        100000000000,
        1000000000000,
        10000000000000,
        100000000000000,
        1000000000000000u64,
    ];

    let mut test_number = 0;
    for tge in 0..steps_from_tge.len() {
        for steps in 0..steps_to_convert.len() {
            let formula_res = context
                .ft_contract()
                .with_user(&manager)
                .formula(U64(steps_from_tge[tge]), steps_to_convert[steps])
                .await?
                .0;

            let formula_res = formula_res as f64 / 1e+18;

            println!(
                "{}. formula ({} {}) = {}",
                test_number, steps_from_tge[tge], steps_to_convert[steps], formula_res
            );

            let diff = formula_res - TEST_RESULTS[test_number];
            assert_eq!(true, diff.abs() < EPS);
            test_number = test_number + 1;
        }
    }

    Ok(())
}

pub const TEST_RESULTS: [f64; 144] = [
    0.0009999999999993069988,
    0.0099999999999722827965,
    0.09999999999764401515,
    0.99999999976855979966,
    9.999999976897553822,
    99.99999769017119888,
    999.9997690212771886,
    9999.97690216929368,
    99997.69021734510898,
    0.0009999999999951495171,
    0.009999999999930706679,
    0.09999999999722826438,
    0.99999999976440212546,
    9.99999997685597819,
    99.99999768975543191,
    999.99976901711954724,
    9999.9769021277170395,
    99997.69021692934621,
    0.0009999999999535733996,
    0.0099999999995149455034,
    0.09999999999307064569,
    0.99999999972282604954,
    9.9999999764402165425,
    99.999997685597818986,
    999.9997689755434749,
    9999.9769017119560885,
    99997.69021277173306,
    0.0009999999995378124409,
    0.009999999995357337218,
    0.09999999995149456977,
    0.99999999930706517937,
    9.999999972282608951,
    99.99999764402173241,
    999.99976855978263757,
    9999.9768975543483975,
    99997.690171195645235,
    0.0009999999953802037218,
    0.0099999999537812491596,
    0.099999999535733699596,
    0.9999999951494564776,
    9.9999999307065223775,
    99.99999722826086668,
    999.99976440217392337,
    9999.9768559782605735,
    99997.689755434781546,
    0.0009999999538041167476,
    0.009999999538020380718,
    0.099999995378124997836,
    0.999999953573369571,
    9.999999514945651313,
    99.999993070652180904,
    999.9997228260870088,
    9999.976440217391428,
    99997.68559782608645,
    0.0009999995380432472221,
    0.009999995380411684162,
    0.09999995380203804962,
    0.9999995378124999501,
    9.999995357336956658,
    99.9999514945652237,
    999.9993070652174083,
    9999.972282608696332,
    99997.644021739135496,
    0.0009999953804345515333,
    0.009999953804324729009,
    0.099999538041168484215,
    0.99999538020380429604,
    9.999953781249999452,
    99.99953573369565163,
    999.99514945652174447,
    9999.930706521739921,
    99997.22826086956775,
    0.0009999538043475950794,
    0.009999538043455163602,
    0.099995380432472830146,
    0.99995380411684786637,
    9.999538020380434489,
    99.995378125000002,
    999.95357336956521976,
    9999.514945652173992,
    99993.07065217391937,
    0.0009995380434780298893,
    0.009995380434759511268,
    0.09995380434551630333,
    0.99953804324728257047,
    9.995380411684783084,
    99.953802038043477296,
    999.5378124999999727,
    9995.357336956521976,
    99951.49456521739194,
    0.0009953804347823777716,
    0.009953804347802989658,
    0.0995380434759510907,
    0.99538043455163038864,
    9.9538043247282601556,
    99.53804116847825867,
    995.3802038043478433,
    9953.78125,
    99535.73369565217581,
    0.0009538043478258559447,
    0.009538043478237771822,
    0.09538043478029890887,
    0.95380434759510868137,
    9.538043455163043305,
    95.38043247282608661,
    953.80411684782609427,
    9538.020380434782055,
    95378.125,
    0.0005380434782607852349,
    0.005380434782600264018,
    0.053804347825243750703,
    0.53804347817654929464,
    5.3804347741766713753,
    53.804346982884489137,
    538.04339394062299107,
    5380.4263505840362996,
    53803.50462362102553,
    0.00010531914893616588951,
    0.0010531914893612702357,
    0.0105319148935738241685,
    0.10531914893185048698,
    1.053191488929729136,
    10.531914850419713758,
    105.31914461643948755,
    1053.19105738863027,
    10531.871696309839535,
    1.16470588235293541626e-05,
    0.00011647058823528841538,
    0.0011647058823523713262,
    0.011647058823472423994,
    0.11647058822959541202,
    1.1647058817830711064,
    11.647058766542404129,
    116.47058253659338334,
    1164.705312482868294,
    1.1895246692412392412e-06,
    1.1891116398421971423e-05,
    0.00011890600111673168301,
    0.0011890610437408145102,
    0.011890606307114153298,
    0.118906064103715028435,
    1.1890606420697238388,
    11.890606361840548644,
    118.906058271739922816,
];
