use anyhow::Result;
use near_sdk::json_types::U64;
use sweat_model::SweatApiIntegration;

use crate::prepare::{prepare_contract, IntegrationContext};

const EPS: f64 = 0.00001;

#[tokio::test]
async fn test_formula() -> Result<()> {
    let mut context = prepare_contract().await?;

    let oracle = context.oracle().await?;

    let steps = context.ft_contract().get_steps_since_tge().await?;

    assert_eq!(0, steps.0);

    let steps_to_convert = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000];
    let steps_from_tge = [
        1,
        10,
        100,
        1000,
        10000,
        100000,
        1000000,
        10000000,
        100000000,
        1000000000,
        10000000000,
        100000000000,
        1000000000000,
        10000000000000,
        100000000000000,
        1000000000000000u64,
    ];

    let mut test_number = 0;
    for tge in steps_from_tge {
        for steps in steps_to_convert {
            let formula_res = context
                .ft_contract()
                .formula(U64(tge), steps)
                .with_user(&oracle)
                .await?
                .0;

            let formula_res = formula_res as f64 / 1e+18;

            println!("{}. formula ({} {}) = {}", test_number, tge, steps, formula_res);

            let diff = formula_res - TEST_RESULTS[test_number];
            assert!(diff.abs() < EPS);
            test_number += 1;
        }
    }

    Ok(())
}

pub const TEST_RESULTS: [f64; 144] = [
    0.000_999_999_999_999_307,
    0.009_999_999_999_972_283,
    0.099_999_999_997_644_02,
    0.999_999_999_768_559_8,
    9.999_999_976_897_554,
    99.999_997_690_171_2,
    999.999_769_021_277_2,
    9_999.976_902_169_294,
    99_997.690_217_345_11,
    0.000_999_999_999_995_149_5,
    0.009_999_999_999_930_707,
    0.099_999_999_997_228_26,
    0.999_999_999_764_402_1,
    9.999_999_976_855_978,
    99.999_997_689_755_43,
    999.999_769_017_119_5,
    9_999.976_902_127_717,
    99_997.690_216_929_35,
    0.000_999_999_999_953_573_4,
    0.009_999_999_999_514_946,
    0.099_999_999_993_070_65,
    0.999_999_999_722_826,
    9.999_999_976_440_217,
    99.999_997_685_597_82,
    999.999_768_975_543_5,
    9_999.976_901_711_956,
    99_997.690_212_771_73,
    0.000_999_999_999_537_812_4,
    0.009_999_999_995_357_337,
    0.099_999_999_951_494_57,
    0.999_999_999_307_065_2,
    9.999_999_972_282_609,
    99.999_997_644_021_73,
    999.999_768_559_782_6,
    9_999.976_897_554_348,
    99_997.690_171_195_65,
    0.000_999_999_995_380_203_7,
    0.009_999_999_953_781_25,
    0.099_999_999_535_733_7,
    0.999_999_995_149_456_5,
    9.999_999_930_706_522,
    99.999_997_228_260_87,
    999.999_764_402_173_9,
    9_999.976_855_978_26,
    99_997.689_755_434_78,
    0.000_999_999_953_804_116_7,
    0.009_999_999_538_020_38,
    0.099_999_995_378_125,
    0.999_999_953_573_369_6,
    9.999_999_514_945_651,
    99.999_993_070_652_18,
    999.999_722_826_087,
    9_999.976_440_217_391,
    99_997.685_597_826_09,
    0.000_999_999_538_043_247_2,
    0.009_999_995_380_411_684,
    0.099_999_953_802_038_05,
    0.999_999_537_812_5,
    9.999_995_357_336_957,
    99.999_951_494_565_22,
    999.999_307_065_217_4,
    9_999.972_282_608_696,
    99_997.644_021_739_14,
    0.000_999_995_380_434_551_5,
    0.009_999_953_804_324_729,
    0.099_999_538_041_168_48,
    0.999_995_380_203_804_3,
    9.999_953_781_25,
    99.999_535_733_695_65,
    999.995_149_456_521_7,
    9_999.930_706_521_74,
    99_997.228_260_869_57,
    0.000_999_953_804_347_595,
    0.009_999_538_043_455_164,
    0.099_995_380_432_472_83,
    0.999_953_804_116_847_9,
    9.999_538_020_380_434,
    99.995_378_125,
    999.953_573_369_565_2,
    9_999.514_945_652_174,
    99_993.070_652_173_92,
    0.000_999_538_043_478_029_9,
    0.009_995_380_434_759_511,
    0.099_953_804_345_516_3,
    0.999_538_043_247_282_6,
    9.995_380_411_684_783,
    99.953_802_038_043_48,
    999.537_812_5,
    9_995.357_336_956_522,
    99_951.494_565_217_39,
    0.000_995_380_434_782_377_8,
    0.009_953_804_347_802_99,
    0.099_538_043_475_951_09,
    0.995_380_434_551_630_4,
    9.953_804_324_728_26,
    99.538_041_168_478_26,
    995.380_203_804_347_8,
    9953.78125,
    99_535.733_695_652_18,
    0.000_953_804_347_825_855_9,
    0.009_538_043_478_237_772,
    0.095_380_434_780_298_91,
    0.953_804_347_595_108_7,
    9.538_043_455_163_043,
    95.380_432_472_826_09,
    953.804_116_847_826_1,
    9_538.020_380_434_782,
    95378.125,
    0.000_538_043_478_260_785_2,
    0.005_380_434_782_600_264,
    0.053_804_347_825_243_75,
    0.538_043_478_176_549_3,
    5.380_434_774_176_671,
    53.804_346_982_884_49,
    538.043_393_940_623,
    5_380.426_350_584_036,
    53_803.504_623_621_026,
    0.000_105_319_148_936_165_89,
    0.001_053_191_489_361_270_2,
    0.010_531_914_893_573_824,
    0.105_319_148_931_850_49,
    1.053_191_488_929_729_1,
    10.531_914_850_419_714,
    105.319_144_616_439_49,
    1_053.191_057_388_630_3,
    10_531.871_696_309_84,
    1.164_705_882_352_935_4e-5,
    0.000_116_470_588_235_288_42,
    0.001_164_705_882_352_371_3,
    0.011_647_058_823_472_424,
    0.116_470_588_229_595_41,
    1.164_705_881_783_071,
    11.647_058_766_542_404,
    116.470_582_536_593_38,
    1_164.705_312_482_868_3,
    1.189_524_669_241_239_2e-6,
    1.189_111_639_842_197_1e-5,
    0.000_118_906_001_116_731_68,
    0.001_189_061_043_740_814_5,
    0.011_890_606_307_114_153,
    0.118_906_064_103_715_03,
    1.189_060_642_069_723_8,
    11.890_606_361_840_549,
    118.906_058_271_739_92,
];
