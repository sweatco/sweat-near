use near_sdk::json_types::{U128, U64};
use serde_json::json;

const SWEAT_WASM_FILEPATH: &str = "./target/wasm32-unknown-unknown/release/sweat.wasm";

const EPS: f64 = 0.00001;

#[tokio::main]
async fn main() -> anyhow::Result<()> {
    // can't use sandbox on M1 because of
    // https://github.com/near/workspaces-rs/issues/110
    // ☹️
    let worker = workspaces::testnet().await?;
    let wasm = std::fs::read(SWEAT_WASM_FILEPATH)?;
    let contract = worker.dev_deploy(&wasm).await?;
    let oracle = worker.dev_create_account().await?;

    let result = contract.call("new").args_json(json!({})).transact().await?;
    println!("deploy: {:#?}", result);

    let result = contract
        .view("get_steps_since_tge")
        .args_json(json!({}))
        .await?
        .json::<U64>()?;
    assert_eq!(result, U64(0));

    let steps_to_convert = [1u16, 10, 100, 1000, 10000];
    let steps_since_tge = [
        1,
        10,
        100,
        1000,
        10000,
        100000,
        1000000,
        10000000,
        100000000,
        1000000000,
        10000000000,
        100000000000,
        1000000000000,
        10000000000000,
        100000000000000,
        1000000000000000u64,
    ];
    let mut test_number = 0;
    for tge in 0..steps_since_tge.len() {
        for steps in 0..steps_to_convert.len() {
            let formula_res = oracle
                .call(contract.id(), "formula")
                .args_json((U64(steps_since_tge[tge]), steps_to_convert[steps]))
                .max_gas()
                .transact()
                .await?
                .json::<U128>()?
                .0 as f64
                / 1e+18;
            println!(
                "{}. formula ({} {}) = {}",
                test_number, steps_since_tge[tge], steps_to_convert[steps], formula_res
            );

            let diff = formula_res - TEST_RESULTS[test_number];
            assert_eq!(true, diff.abs() < EPS);
            test_number = test_number + 1;
        }
    }

    Ok(())
}

const TEST_RESULTS: [f64; 80] = [
    0.0009999999999997387,
    0.009999999999989545,
    0.09999999999911131,
    0.9999999999126997,
    9.999999991285653,
    0.0009999999999981703,
    0.009999999999973861,
    0.09999999999895448,
    0.9999999999111314,
    9.999999991269972,
    0.0009999999999824878,
    0.009999999999817035,
    0.09999999999738622,
    0.9999999998954487,
    9.999999991113144,
    0.0009999999998256607,
    0.009999999998248767,
    0.09999999998170353,
    0.9999999997386219,
    9.999999989544875,
    0.0009999999982573922,
    0.009999999982566081,
    0.09999999982487667,
    0.9999999981703533,
    9.99999997386219,
    0.0009999999825747062,
    0.00999999982573922,
    0.09999999825660807,
    0.9999999824876673,
    9.99999981703533,
    0.0009999998257478467,
    0.009999998257470626,
    0.09999998257392213,
    0.9999998256608078,
    9.999998248766735,
    0.0009999982574792517,
    0.009999982574784676,
    0.09999982574706262,
    0.9999982573922128,
    9.999982566080785, //
    0.0009999825747933012,
    0.009999825747925172,
    0.09999825747846758,
    0.9999825747062624,
    9.999825739221281,
    0.0009998257479337971,
    0.009998257479330131,
    0.09998257479251717,
    0.9998257478467583,
    9.998257470626239,
    0.0009982574793387558,
    0.009982574793379717,
    0.09982574793301303,
    0.9982574792517169,
    9.982574784675826,
    0.0009825747933883426,
    0.009825747933875585,
    0.09825747933797171,
    0.9825747933013037,
    9.825747925171694,
    0.0008257479338842365,
    0.00825747933883687,
    0.08257479338781916,
    0.8257479338232387,
    8.257479332737093,
    0.00032230806451611884,
    0.003223080645160268,
    0.03223080645151066,
    0.32230806450590477,
    3.223080644138863,
    4.541613636363615e-05,
    0.0004541613636363422,
    0.0045416136363614894,
    0.04541613636342166,
    0.45416136361489273,
    4.741577501003273e-06,
    4.739512354008062e-05,
    0.00047393471422484454,
    0.004739338881660464,
    0.047393368165134696,
];
